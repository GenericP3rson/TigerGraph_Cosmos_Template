import 'd3-transition';
import { GraphConfig, GraphConfigInterface } from "./config";
import { Node, Link, InputNode, InputLink } from "./types";
export declare class Graph<N extends InputNode, L extends InputLink> {
    config: GraphConfig<Node<N>, Link<N, L>>;
    private canvas;
    private reglInstance;
    private requestAnimationFrameId;
    private isRightClickMouse;
    private graph;
    private store;
    private points;
    private lines;
    private forceGravity;
    private forceCenter;
    private forceManyBody;
    private forceLinkIncoming;
    private forceLinkOutcoming;
    private forceMouse;
    private zoomInstance;
    private fpsMonitor;
    private hasBeenRecentlyDestroyed;
    constructor(canvas: HTMLCanvasElement, config?: GraphConfigInterface<N, L>);
    get progress(): number;
    get simulationIsRunning(): boolean;
    get nodes(): Node<N>[];
    get links(): Link<N, L>[];
    setConfig(config: Partial<GraphConfigInterface<Node<N>, Link<N, L>>>): void;
    setData(nodes: InputNode[], links: InputLink[], runSimulation?: boolean): void;
    findNodeById(id: string): Node<N> | undefined;
    selectNodeById(id: string): void;
    zoom(value: number, duration?: number): void;
    getNodePositions(): {
        [key: string]: {
            x: number;
            y: number;
        };
    };
    onSelect(selection: [[number, number], [number, number]] | null): void;
    get selectedPoints(): N[];
    start(alpha?: number): void;
    pause(): void;
    restart(): void;
    drawOneFrame(): void;
    destroy(): void;
    create(): void;
    private update;
    private initPrograms;
    private frame;
    private stopFrames;
    private end;
    private onClick;
    private onMouseMove;
    private onRightClickMouse;
    private resizeCanvas;
}
export type { InputLink, InputNode, Node, Link } from './types';
export type { GraphConfigInterface } from './config';
